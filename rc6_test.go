package rc6

import (
	"bytes"
	"testing"
)

// The test vectors are from original RC6 paper

func TestFirstVector(t *testing.T) {
	plaintext := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	key := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	ciphertext := make([]byte, 16)
	expected_ciphertext := []byte{0x8F, 0xC3, 0xA5, 0x36, 0x56, 0xB1, 0xF7, 0x78, 0xC1, 0x29, 0xDF, 0x4E, 0x98, 0x48, 0xA4, 0x1E}
	ctx := NewCipher(key)
	ctx.Encrypt(ciphertext, plaintext)
	if !bytes.Equal(ciphertext, expected_ciphertext) {
		t.Fatal()
	}
}

func TestSecondVector(t *testing.T) {
	plaintext := []byte{0x02, 0x13, 0x24, 0x35, 0x46, 0x57, 0x68, 0x79, 0x8a, 0x9b, 0xac, 0xbd, 0xce, 0xdf, 0xe0, 0xf1}
	key := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78}
	ciphertext := make([]byte, 16)
	expected_ciphertext := []byte{0x52, 0x4e, 0x19, 0x2f, 0x47, 0x15, 0xc6, 0x23, 0x1f, 0x51, 0xf6, 0x36, 0x7e, 0xa4, 0x3f, 0x18}
	ctx := NewCipher(key)
	ctx.Encrypt(ciphertext, plaintext)
	if !bytes.Equal(ciphertext, expected_ciphertext) {
		t.Fatal()
	}
}

func TestThirdVector(t *testing.T) {
	plaintext := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	key := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	ciphertext := make([]byte, 16)
	expected_ciphertext := []byte{0x6c, 0xd6, 0x1b, 0xcb, 0x19, 0x0b, 0x30, 0x38, 0x4e, 0x8a, 0x3f, 0x16, 0x86, 0x90, 0xae, 0x82}
	ctx := NewCipher(key)
	ctx.Encrypt(ciphertext, plaintext)
	if !bytes.Equal(ciphertext, expected_ciphertext) {
		t.Fatal()
	}
}

func TestFourthVector(t *testing.T) {
	plaintext := []byte{0x02, 0x13, 0x24, 0x35, 0x46, 0x57, 0x68, 0x79, 0x8a, 0x9b, 0xac, 0xbd, 0xce, 0xdf, 0xe0, 0xf1}
	key := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xf0}
	ciphertext := make([]byte, 16)
	expected_ciphertext := []byte{0x68, 0x83, 0x29, 0xd0, 0x19, 0xe5, 0x05, 0x04, 0x1e, 0x52, 0xe9, 0x2a, 0xf9, 0x52, 0x91, 0xd4}
	ctx := NewCipher(key)
	ctx.Encrypt(ciphertext, plaintext)
	if !bytes.Equal(ciphertext, expected_ciphertext) {
		t.Fatal()
	}
}

func TestFifthVector(t *testing.T) {
	plaintext := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	key := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	ciphertext := make([]byte, 16)
	expected_ciphertext := []byte{0x8f, 0x5f, 0xbd, 0x05, 0x10, 0xd1, 0x5f, 0xa8, 0x93, 0xfa, 0x3f, 0xda, 0x6e, 0x85, 0x7e, 0xc2}
	ctx := NewCipher(key)
	ctx.Encrypt(ciphertext, plaintext)
	if !bytes.Equal(ciphertext, expected_ciphertext) {
		t.Fatal()
	}
}

func TestSixthVector(t *testing.T) {
	plaintext := []byte{0x02, 0x13, 0x24, 0x35, 0x46, 0x57, 0x68, 0x79, 0x8a, 0x9b, 0xac, 0xbd, 0xce, 0xdf, 0xe0, 0xf1}
	key := []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xf0, 0x10, 0x32, 0x54, 0x76, 0x98, 0xba, 0xdc, 0xfe}
	ciphertext := make([]byte, 16)
	expected_ciphertext := []byte{0xc8, 0x24, 0x18, 0x16, 0xf0, 0xd7, 0xe4, 0x89, 0x20, 0xad, 0x16, 0xa1, 0x67, 0x4e, 0x5d, 0x48}
	ctx := NewCipher(key)
	ctx.Encrypt(ciphertext, plaintext)
	if !bytes.Equal(ciphertext, expected_ciphertext) {
		t.Fatal()
	}
}
